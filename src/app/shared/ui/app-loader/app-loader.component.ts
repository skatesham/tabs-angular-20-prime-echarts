import { ChangeDetectionStrategy, Component, OnInit, signal } from '@angular/core';
import { AudioService } from '../../../core/services/audio.service';

@Component({
  selector: 'p-app-loader',
  standalone: true,
  templateUrl: './app-loader.component.html',
  styleUrl: './app-loader.component.css',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class AppLoaderComponent implements OnInit {
  readonly showSoundButton = signal(false);
  readonly soundPlaying = signal(false);
  
  constructor(private audioService: AudioService) {}

  ngOnInit(): void {
    // Tenta autoplay ap√≥s um pequeno delay
    setTimeout(() => {
      this.tryAutoplaySound();
    }, 100);
  }

  private async tryAutoplaySound(): Promise<void> {
    try {
      console.log('üîä Tentando autoplay...');
      await this.audioService.playRitualSound();
      this.soundPlaying.set(true);
      this.showSoundButton.set(false);
      console.log('‚úÖ √Åudio tocando automaticamente');
    } catch (error) {
      // Autoplay bloqueado - mostrar bot√£o para mobile
      console.log('üîá Autoplay bloqueado - mostrando bot√£o de som', error);
      this.showSoundButton.set(true);
      this.soundPlaying.set(false);
    }
  }

  async activateSound(): Promise<void> {
    try {
      await this.audioService.playRitualSound();
      this.soundPlaying.set(true);
      this.showSoundButton.set(false);
      console.log('‚úÖ √Åudio ativado pelo usu√°rio');
    } catch (error) {
      console.error('‚ùå Erro ao tocar √°udio:', error);
      // Mant√©m o bot√£o vis√≠vel se falhar
      this.showSoundButton.set(true);
    }
  }
}
